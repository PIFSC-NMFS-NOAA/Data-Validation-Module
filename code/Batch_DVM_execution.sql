--drop view if it exists:
DROP VIEW SPT_QC_EVT_DIST_ISSUE_V;

--drop the materialized view (temporary workaround for slow query):
DROP MATERIALIZED VIEW SPT_QC_EVT_DIST_ISSUE_V;

--re-create the materialized view (temporary workaround for slow query):
CREATE MATERIALIZED VIEW 
SPT_QC_EVT_DIST_ISSUE_V
AS
SELECT CURRENT_EVENT.VESS_TRIP_ID,
CURRENT_EVENT.VESS_TRIP_EVT_ID CURR_VESS_TRIP_EVT_ID,
CURRENT_EVENT.PTA_VESS_NAME,
CURRENT_EVENT.FORMATTED_DEPART_DTM,
CURRENT_EVENT.FORMATTED_ARRIVAL_DTM,
CURRENT_EVENT.VESS_TRIP_EVT_LAT_DD CURR_LAT_DD,
CURRENT_EVENT.VESS_TRIP_EVT_LON_DD CURR_LON_DD,
CURRENT_EVENT.VESS_TRIP_EVT_START_DTM CURR_TRIP_EVT_START_DTM,
CURRENT_EVENT.FORMATTED_TRIP_EVT_START_DTM CURR_FORM_TRIP_EVT_START_DTM,
CURRENT_EVENT.ACT_NAME CURR_ACT_NAME,
CURRENT_EVENT.RPL_ORIG_REG_NUM,
CURRENT_EVENT.RPL_ORIG_VESS_NAME,
CURRENT_EVENT.VESS_REG_NUM,
NEXT_EVENT.VESS_TRIP_EVT_LAT_DD NEXT_LAT_DD,
NEXT_EVENT.VESS_TRIP_EVT_LON_DD NEXT_LON_DD,
NEXT_EVENT.ACT_NAME NEXT_ACT_NAME,
NEXT_EVENT.VESS_TRIP_EVT_START_DTM NEXT_TRIP_EVT_START_DTM,
NEXT_EVENT.FORMATTED_TRIP_EVT_START_DTM NEXT_FORM_TRIP_EVT_START_DTM,
NEXT_EVENT.VESS_TRIP_EVT_ID NEXT_VESS_TRIP_EVT_ID,

calc_distance_FN (CURRENT_EVENT.VESS_TRIP_EVT_LAT_DD, CURRENT_EVENT.VESS_TRIP_EVT_LON_DD, NEXT_EVENT.VESS_TRIP_EVT_LAT_DD, NEXT_EVENT.VESS_TRIP_EVT_LON_DD) DIST_BETWEEN_EVENTS_KM,
ROUND(24 * (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM), 2) TIME_BETWEEN_EVENTS_HRS,
(CASE WHEN (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM) <> 0 THEN ROUND(calc_distance_FN (CURRENT_EVENT.VESS_TRIP_EVT_LAT_DD, CURRENT_EVENT.VESS_TRIP_EVT_LON_DD, NEXT_EVENT.VESS_TRIP_EVT_LAT_DD, NEXT_EVENT.VESS_TRIP_EVT_LON_DD) / (24 * (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM)), 2) ELSE NULL END) SPEED_KM_HR,

(CASE WHEN (CASE WHEN (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM) <> 0 THEN ROUND(calc_distance_FN (CURRENT_EVENT.VESS_TRIP_EVT_LAT_DD, CURRENT_EVENT.VESS_TRIP_EVT_LON_DD, NEXT_EVENT.VESS_TRIP_EVT_LAT_DD, NEXT_EVENT.VESS_TRIP_EVT_LON_DD) / (24 * (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM)), 2) ELSE NULL END) > 30 AND (CASE WHEN (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM) <> 0 THEN ROUND(calc_distance_FN (CURRENT_EVENT.VESS_TRIP_EVT_LAT_DD, CURRENT_EVENT.VESS_TRIP_EVT_LON_DD, NEXT_EVENT.VESS_TRIP_EVT_LAT_DD, NEXT_EVENT.VESS_TRIP_EVT_LON_DD) / (24 * (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM)), 2) ELSE NULL END) <= 50 THEN 'Y' ELSE 'N' END) INV_DB_COORD_DIST_WARN,

(CASE WHEN (CASE WHEN (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM) <> 0 THEN ROUND(calc_distance_FN (CURRENT_EVENT.VESS_TRIP_EVT_LAT_DD, CURRENT_EVENT.VESS_TRIP_EVT_LON_DD, NEXT_EVENT.VESS_TRIP_EVT_LAT_DD, NEXT_EVENT.VESS_TRIP_EVT_LON_DD) / (24 * (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM)), 2) ELSE NULL END) > 50 THEN 'Y' ELSE 'N' END) INV_DB_COORD_DIST_ERR

FROM
(SELECT ROW_NUMBER() OVER (PARTITION BY SPT_TRIP_EVT_V.VESS_TRIP_ID ORDER BY SPT_TRIP_EVT_V.VESS_TRIP_EVT_START_DTM,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_ID) ROWNUM_VAL,
  SPT_RPL_PTA_HEADER_V.PTA_VESS_NAME,
  SPT_RPL_PTA_HEADER_V.VESS_TRIP_ID,
  SPT_RPL_PTA_HEADER_V.FORMATTED_DEPART_DTM,
  SPT_RPL_PTA_HEADER_V.FORMATTED_ARRIVAL_DTM,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_LAT_DD,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_LON_DD,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_ID,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_START_DTM,
  SPT_TRIP_EVT_V.FORMATTED_TRIP_EVT_START_DTM,
  SPT_TRIP_EVT_V.ACT_NAME,
  SPT_RPL_PTA_HEADER_V.RPL_ORIG_REG_NUM,
  SPT_RPL_PTA_HEADER_V.RPL_ORIG_VESS_NAME,
  SPT_RPL_PTA_HEADER_V.VESS_REG_NUM
FROM
  SPT_RPL_PTA_HEADER_V
INNER JOIN SPT_TRIP_EVT_V
ON
  SPT_RPL_PTA_HEADER_V.VESS_TRIP_ID = SPT_TRIP_EVT_V.VESS_TRIP_ID
ORDER BY
    SPT_RPL_PTA_HEADER_V.PTA_VESS_NAME,
    SPT_RPL_PTA_HEADER_V.VESS_TRIP_ID,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_START_DTM,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_ID) CURRENT_EVENT
  LEFT JOIN 
(SELECT ROW_NUMBER() OVER (PARTITION BY SPT_TRIP_EVT_V.VESS_TRIP_ID ORDER BY SPT_TRIP_EVT_V.VESS_TRIP_EVT_START_DTM,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_ID) ROWNUM_VAL,
  SPT_RPL_PTA_HEADER_V.VESS_TRIP_ID,
  SPT_RPL_PTA_HEADER_V.FORMATTED_DEPART_DTM,
  SPT_RPL_PTA_HEADER_V.FORMATTED_ARRIVAL_DTM,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_LAT_DD,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_LON_DD,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_ID,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_START_DTM,
  SPT_TRIP_EVT_V.FORMATTED_TRIP_EVT_START_DTM,
  SPT_TRIP_EVT_V.ACT_NAME
FROM
  SPT_RPL_PTA_HEADER_V
INNER JOIN SPT_TRIP_EVT_V
ON
  SPT_RPL_PTA_HEADER_V.VESS_TRIP_ID = SPT_TRIP_EVT_V.VESS_TRIP_ID
ORDER BY
    SPT_RPL_PTA_HEADER_V.PTA_VESS_NAME,
    SPT_RPL_PTA_HEADER_V.VESS_TRIP_ID,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_START_DTM,
  SPT_TRIP_EVT_V.VESS_TRIP_EVT_ID) NEXT_EVENT
  
  ON (NEXT_EVENT.ROWNUM_VAL = CURRENT_EVENT.ROWNUM_VAL + 1 AND NEXT_EVENT.VESS_TRIP_ID = CURRENT_EVENT.VESS_TRIP_ID)

WHERE 
((CASE WHEN (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM) <> 0 THEN ROUND(calc_distance_FN (CURRENT_EVENT.VESS_TRIP_EVT_LAT_DD, CURRENT_EVENT.VESS_TRIP_EVT_LON_DD, NEXT_EVENT.VESS_TRIP_EVT_LAT_DD, NEXT_EVENT.VESS_TRIP_EVT_LON_DD) / (24 * (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM)), 2) ELSE NULL END) > 30 AND (CASE WHEN (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM) <> 0 THEN ROUND(calc_distance_FN (CURRENT_EVENT.VESS_TRIP_EVT_LAT_DD, CURRENT_EVENT.VESS_TRIP_EVT_LON_DD, NEXT_EVENT.VESS_TRIP_EVT_LAT_DD, NEXT_EVENT.VESS_TRIP_EVT_LON_DD) / (24 * (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM)), 2) ELSE NULL END) <= 50)
OR ((CASE WHEN (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM) <> 0 THEN ROUND(calc_distance_FN (CURRENT_EVENT.VESS_TRIP_EVT_LAT_DD, CURRENT_EVENT.VESS_TRIP_EVT_LON_DD, NEXT_EVENT.VESS_TRIP_EVT_LAT_DD, NEXT_EVENT.VESS_TRIP_EVT_LON_DD) / (24 * (NEXT_EVENT.VESS_TRIP_EVT_START_DTM - CURRENT_EVENT.VESS_TRIP_EVT_START_DTM)), 2) ELSE NULL END) > 50)

  ORDER BY
  CURRENT_EVENT.PTA_VESS_NAME,
  CURRENT_EVENT.VESS_TRIP_ID,
  CURRENT_EVENT.VESS_TRIP_EVT_START_DTM,
  CURRENT_EVENT.VESS_TRIP_EVT_ID
;

COMMENT ON MATERIALIZED VIEW SPT_QC_EVT_DIST_ISSUE_V IS '(Temporary workaround materialized view object for 2016 RPL data freeze) RPL Event Vessel Speed QC Validator (View)

This View identifies all vessel speed QC validation warnings and errors based on the distance (calculated using the Haversine formula) and time difference between two consecutive Trip Events for the same fishing trip.  The total average speed of the vessel between the two sets of coordinates is calculated based on the difference between the Trip Event date/times.  The Warning threshold for questionable trip event locations is 30 km/hr and the error threshold for erroneous distances is 50 km/hr; any speeds above these thresholds will trigger an error to be indicated by the query and a result set row returned.  This query returns multiple calculated fields that are referenced by SPT_ERROR_TYPES.IND_FIELD_NAME values (''Y'' indicates an error, and ''N'' indicates no error for a given QC check) in the associated QC objects.  This is a QC Object that is defined in the SPT_QC_OBJECTS table.';

COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.VESS_TRIP_ID IS 'Primary Key for the SPT_VESSEL_TRIPS table';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.CURR_VESS_TRIP_EVT_ID IS 'The vessel Trip Event for the Current Trip Event Date/Time and location';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.PTA_VESS_NAME IS 'The name of the given fishing Vessel during the DEPARTURE_DATE_UTC (PTA)';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.FORMATTED_DEPART_DTM IS 'The formatted date/time (in UTC) of departure for the given fishing trip (MM/DD/YYYY HH24:MI)';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.FORMATTED_ARRIVAL_DTM IS 'The formatted date/time (in UTC) of arrival for the given fishing trip (MM/DD/YYYY HH24:MI)';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.CURR_LAT_DD IS 'The Current Trip Event''s Latitude (DD)';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.CURR_LON_DD IS 'The Current Trip Event''s Longitude (DD)';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.CURR_TRIP_EVT_START_DTM IS 'The Current Trip Event''s Event Start Date/Time';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.CURR_FORM_TRIP_EVT_START_DTM IS 'The Current Trip Event''s Formatted Event Start Date/Time (MM/DD/YYYY HH24:MI format)';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.CURR_ACT_NAME IS 'The Current Trip Event''s Activity';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.NEXT_LAT_DD IS 'The Subsequent Trip Event''s Latitude (DD)';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.NEXT_LON_DD IS 'The Subsequent Trip Event''s Longitude (DD)';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.NEXT_ACT_NAME IS 'The Subsequent Trip Event''s Activity';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.NEXT_TRIP_EVT_START_DTM IS 'The Subsequent Trip Event''s Event Start Date/Time';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.NEXT_FORM_TRIP_EVT_START_DTM IS 'The Subsequent Trip Event''s Formatted Event Start Date/Time (MM/DD/YYYY HH24:MI format)';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.NEXT_VESS_TRIP_EVT_ID IS 'The vessel trip event for the Subsequent Trip Event Date/Time and location';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.DIST_BETWEEN_EVENTS_KM IS 'The distance in km between the two Trip Event locations (based on the Haversine formula)';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.TIME_BETWEEN_EVENTS_HRS IS 'The time in hours between the two Trip Event Date/Time values';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.SPEED_KM_HR IS 'The total average speed in km/hr based on the distance in KM between the two Trip Event locations and the time difference between the Trip Event Date/Times';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.INV_DB_COORD_DIST_WARN IS 'Warning - The Distance Between Two Consecutive Trip Events Stored in the Database is Greater than the warning threshold of 30km/hr';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.INV_DB_COORD_DIST_ERR IS 'Error - The Distance Between Two Consecutive Trip Events Stored in the Database is Greater than the warning threshold of 50km/hr';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.VESS_REG_NUM IS 'The registration number for the given fishing Vessel';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.RPL_ORIG_REG_NUM IS 'The Registration No value reported in the RPL form';
COMMENT ON COLUMN SPT_QC_EVT_DIST_ISSUE_V.RPL_ORIG_VESS_NAME IS 'Vessel Name value reported in the RPL';





--set the DBMS_OUTPUT buffer limit:
SET SERVEROUTPUT ON size 1000000;

exec DBMS_OUTPUT.ENABLE(NULL);


--this code snippet will run the data validation module to validate SPTT RPL data for the results of the SELECT query.  This can be used to batch process vessel trips

DECLARE
    
    --declare variable for storing data stream codes
    P_DATA_STREAM_CODE DVM_PKG.VARCHAR_ARRAY_NUM;

    --declare variable for numeric surrogate primary key
    P_PK_ID NUMBER;
BEGIN
    -- Modify the code to initialize the variable

    --define the data stream codes for the given data stream (hard-coded due to RPL data stream):
    P_DATA_STREAM_CODE(1) := 'RPL';
    P_DATA_STREAM_CODE(2) := 'XML';

    --query for VESS_TRIP_ID values that are to be batch processed (currently for processing all 2016 RPL data):
    FOR rec IN (SELECT VESS_TRIP_ID FROM SPT_VESSEL_TRIPS WHERE TO_CHAR(VESS_TRIP_DEPART_DTM, 'YYYY') IN ('2016'))

    --loop through each VESS_TRIP_ID returned by the SELECT query:    
    LOOP
    
      DBMS_OUTPUT.put_line ('running VALIDATE_PARENT_RECORD('||rec.VESS_TRIP_ID||')');    
      
      P_PK_ID := rec.VESS_TRIP_ID;
      
      --run the validator procedure on the given data stream(s) and primary key value:
      DVM_PKG.VALIDATE_PARENT_RECORD(
      P_DATA_STREAM_CODES => P_DATA_STREAM_CODE,
      P_PK_ID => P_PK_ID
      );
      
    END LOOP;

END;